
#include "tree.h"
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <chrono>
#include <cstring>
using namespace std;

void initialize_and_permute(int permutation[], int n)
{
  unsigned i;
    for (i = 0; i <= n-2; i++) {
        unsigned j = i+ (rand()%(n-i));
        swap(permutation[i], permutation[j]);
    }
}
/*
int main(int argc, int * argv[]){
	int n = 1024;
	int * IL = new int[n +1];
	IL[0] = n;
	SearchTree S;
	S = MakeEmpty( NULL );
	for(int i=1;i<n+1;i++){
		IL[i] = rand() % 1000000;
		S = Insert(IL[i],S);
	}
	cout << "Height of tree of size 1024 after insertion " << Height(S) << endl;  
	int k = 50;
	for(int i = 0;i<k;i++){
		int j = rand() %1024;
		S = Delete(IL[j+1], S);	
		S = Insert(IL[j+1],S);
	}
	cout << "Height of tree of size 1024 after 512 random deletions/insertions " << Height(S) << endl;
}
*/

int main(int argc, char *argv[]){
	int*  sizes = new int[10];
	int * heights = new int[10];
	sizes[0] = 8;
	SearchTree T;
	for(int i = 1;i<10;i++)  sizes[i] = sizes[i-1]*2;	
	for(int i = 0;i<10;i++){	
		int n = sizes[i];
      		int * IL = new int[n+1];
      		IL[0] = n;  // Set zero entry in in heap to n
      		for(int j=1; j<n+1 ; j++){
			IL[j] = rand()%10000000;
		}
		for(int j=0;j<1;j++){
			T = NULL;
			initialize_and_permute(IL,n);				
      			for(int k=1; k<n+1 ; k++){
				T = Insert(IL[k] , T);
			}
			heights[i] = heights[i] + Height(T);
		}
		//		heights[i] = heights[i];
		cout << heights[i] << endl;
	}
	for (int i = 0; i < 10; i++) cout << "size" << sizes[i] << " height " << heights[i] << endl; 
}

